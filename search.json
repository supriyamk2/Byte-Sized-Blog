[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I’m Supriya Pillai! I’m currently an AI Engineer intern, passionate about exploring the potential of artificial intelligence to solve real-world problems. Previously, I worked as a Data Scientist, where I honed my skills in data analysis and machine learning. Through this blog, I want to share my experiences and insights on various AI and data science topics.\nJoin me as I delve into the world of AI and data science, sharing tutorials, insights, and my own learning journey!"
  },
  {
    "objectID": "posts/pandas-ai/pandasai.html",
    "href": "posts/pandas-ai/pandasai.html",
    "title": "PandasAI-Analysis",
    "section": "",
    "text": "Empower your Data Explorations\nIntroduction\nData analysis often involves asking natural language questions, generating insights, and even creating visualizations. Traditionally, this requires complex coding. But, what if you could interact with your data like you’d chat with an expert? Enter PandasAI, Groq, and OpenAI – transforming the way you explore your data.\nThe field of data analysis is constantly evolving, and new tools and technologies are emerging all the time. In this blog post, we will explore the potential of combining three cutting-edge technologies for data analysis: PandasAI, Groq, and OpenAI.\nPandasAI:\nPandasAI is a Python library that integrates the familiar Pandas data analysis framework with the power of large language models (LLMs) from OpenAI. This allows users to perform data analysis tasks using natural language, making it more intuitive and accessible even for those without extensive programming experience.\nGroq:\nGroq is a company that develops specialized hardware and software for accelerating machine learning workloads. Their GroqChip architecture is designed to deliver high performance and efficiency for data processing and analysis tasks.\nOpenAI:\nOpenAI is a research and deployment company dedicated to developing and promoting friendly AI for the benefit of humanity. They are known for their powerful LLMs, such as GPT-3 and ChatGPT, which can be used for a variety of tasks, including data analysis.\nCombining these technologies:\nBy combining PandasAI, Groq, and OpenAI, we can create a powerful data analysis platform that offers several advantages:\nIntuitive and natural language interface: PandasAI allows users to interact with data using natural language, making data analysis more accessible and efficient.\n\n\n\n\nIntuitive and natural language interface: PandasAI allows users to interact with data using natural language, making data analysis more accessible and efficient.\nHigh performance and scalability: Groq’s hardware and software provide the computational power needed to handle large datasets and complex analysis tasks.\nAdvanced AI capabilities: OpenAI’s LLMs offer powerful capabilities for data cleaning, transformation, and analysis, allowing users to extract deeper insights from their data.\n\nIn this blog post, we will demonstrate how to leverage the combined power of PandasAI, Groq, and OpenAI to perform various data analysis tasks within a user-friendly Streamlit app.\n\n\n\npicture\n\n\nThe Code\nLet’s break down a simplified version of the core code:\nimport streamlit as st\nimport pandas as pd\nfrom dotenv import load_dotenv\nload_dotenv()\nfrom langchain_groq.chat_models import ChatGroq\nimport os\nfrom pandasai.llm.openai import OpenAI\nfrom pandasai import SmartDataframe\nimport matplotlib.pyplot as plt\nImports\n\nstreamlit: Build our interactive web app.\npandas: The foundation for data manipulation in Python.\ndotenv: Securely loads API keys from environment variables.\nlangchain_groq: Access the Groq LLM.\npandasai: The bridge between Pandas and LLMs.\nos: Interact with the operating system (for file paths if needed).\nmatplotlib.pyplot: Create visualizations of our data.\n\n\n# Groq LLM Configuration\ndef load_groq_llm():\n    return ChatGroq(model_name=\"mixtral-8x7b-32768\", api_key=os.environ['GROQ_API_KEY'])\n\n# OpenAI LLM Configuration\ndef load_openai_llm():\n    return OpenAI(api_key=os.environ['OPENAI_API_KEY'])\nLLM setup:\nThese functions establish connections to Groq and OpenAI. They include placeholders for your API keys (GROQ_API_KEY, OPENAI_API_KEY) – ensure those are set as environment variables.\nst.title(\"PandasAI with Groq & OpenAI\")\n\n# File Upload\nuploaded_file = st.file_uploader(\"Upload a CSV file\", type=\"csv\")\n\nif uploaded_file is not None:\n    data = pd.read_csv(uploaded_file)\n    groq_llm = load_groq_llm()\n    openai_llm = load_openai_llm()\nStreamlit Basics:\n\n\n\n\nst.title: Sets the title of your app.\nst.file_uploader: Creates an upload widget for users to provide a CSV file.\n\nLoading Data and LLMs:\n\n\n\n\npd.read_csv: Reads the CSV into a Pandas DataFrame.\nThe load_groq_llm and load_openai_llm functions are called to initialize the LLMs.\n\n# LLM Integration with PandasAI\n    df_groq = SmartDataframe(data, config={'llm': groq_llm})  # Groq dataframe\n    df_openai = SmartDataframe(data, config={'llm': openai_llm})  # OpenAI dataframe\n\n    # User Interface for Choosing an LLM\n    llm_choice = st.selectbox(\"Select Language Model\", (\"Groq\", \"OpenAI\"))\n\n    # Chat Interactions\n    query = st.text_input(\"Enter your query about the data:\")\n    if query:\n        try:\n            if llm_choice == \"Groq\":\n                response = df_groq.chat(query)\n\n            elif llm_choice == \"OpenAI\":\n                response = df_openai.chat(query)\n\n            st.write(response)\n\n            if \"plot generated\" in response.lower():  # Adjust if needed\n                    st.image(\"mount/src/groq_openai/exports/charts/temp_chart.png\")\n\n        except Exception as e:\n            st.error(f\"An error occurred: {e}\")\nPandasAI SmartDataframes:\n\n\n\n\nSmartDataframe(data, config={‘llm’: groq_llm}): Creates a DataFrame specifically linked to the Groq LLM. Any queries on this DataFrame will be routed through Groq.\nA similar SmartDataframe is created for OpenAI.\n\nUser Interface:\n\nst.selectbox:Creates a dropdown in the web app for the user to choose between “Groq” and “OpenAI” as their desired LLM.\n\nChat Interactions:\n\nst.text_input: Creates a text input field for the user to type their data-related query.\nif query: Checks if the user has entered a query.\ntry/except: A safety net handles potential errors and displays them in the app.\nConditional Logic:\n\n\n\n\n\nIf the user selected “Groq”, the query is sent to the Groq SmartDataframe using .chat(query)\nIf “OpenAI” is selected, it’s sent to the OpenAI SmartDataframe.\nst.write(response): Displays the LLM’s response in the web app.\n\nResources:\nhttps://docs.pandas-ai.com/en/latest/\nhttps://wow.groq.com/\nhttps://streamlit.io/\nhttps://www.youtube.com/watch?v=C6R9JLHZDH0"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/doc-query/doc-query.html",
    "href": "posts/doc-query/doc-query.html",
    "title": "DocQuery",
    "section": "",
    "text": "DocQuery\n\nA RAG-based question-answering app that leverages LangChain, LangChain OpenAI, and Pinecone for efficient document understanding.\n\n\n\npicture\n\n\nFunctionality: This app extracts knowledge from your document, stores it intelligently within a Pinecone vector database, and provides accurate answers to your questions.\nKey Technologies: RAG (Retrieval-Augmented Generation): State-of-the-art technique for question answering over structured knowledge.\nLangChain: Flexible framework for building AI applications.\nLangChain OpenAI: Integration with OpenAI’s powerful language models.\nPinecone: Scalable vector database for efficient search and retrieval.\nProject link: https://github.com/supriyamk2/DocQuery"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Byte-Sized-Blog",
    "section": "",
    "text": "PandasAI-Analysis\n\n\n\n\n\n\ngenerative_ai\n\n\nRAG\n\n\nNLP\n\n\n\n\n\n\n\n\n\nMar 4, 2024\n\n\nSupriya Pillai\n\n\n\n\n\n\n\n\n\n\n\n\nDocQuery\n\n\n\n\n\n\ngenerative_ai\n\n\nRAG\n\n\nNLP\n\n\n\n\n\n\n\n\n\nMar 3, 2024\n\n\nSupriya Pillai\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 1, 2024\n\n\nSupriya Pillai\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMar 1, 2024\n\n\nSupriya Pillai\n\n\n\n\n\n\nNo matching items"
  }
]